save.image("~/Udemy/R Programming/my-r-notes/r-notes.RData")
TRUE
FALSE
a <- TRUE
a
b <- FALSE
char <- "This is a string."
char
char
class(b)
class(char)
nvec <- c(10,20,30,40,50)
class(nvec)
usa <- ("U","S","A")
usa <- c("U","S","A")
v <- (TRUE, 20, 40)
v <- c(TRUE, 20, 40)
class(v)
vnum <- c(FALSE, 5, "MICHAEL")
class(vnum)
class(v)
vnum <- c(FALSE, 5)
class(vnum)
temps <- (70,72,79,48,87,73,70)
temps <- c(70,72,79,48,87,73,70)
source("~/.active-rstudio-document", echo=TRUE)
names(temps) <- c("Mon", "Tues", "Weds", "Thurs", "Fri", "Sat", "Sun")
temps
days
#Better way
days <- c("Mon", "Tues", "Weds", "Thurs", "Fri", "Sat", "Sun")
days
names(temps) <- days
days
temps
days <- c("Mon", "Tues", "Weds", "Thurs", "Fri", "Sat", "Sun")
temps <- (72, 55, 79, 60, 80, 70, 69)
days <- c("Mon", "Tues", "Weds", "Thurs", "Fri", "Sat", "Sun")
temps <- c(72, 55, 79, 60, 80, 70, 69)
names(temps) <- days
days
temps
---
title: "Intro-to-R-Basics-Notes"
output:
html_document:
mathjax: local
self_contained: false
theme: dark
highlight: breezedark
date: '2022-05-27'
---
<hr>
This document is the first of my `R`{.bash}-markdown files. This document contains code
and $\LaTeX$. To use the $\LaTeX$ syntax, use the following in `R`{.bash}-markdown.
```r
output:
html_document:
mathjax: local
self_contained: false
```
## Arithmetic in R
Arithmetic in `R`{.bash} is quite simple. You can run it in the Console or run it line by line in the source file.
R supports $+,-,/,\cdot,$ and even modular arithmetic. Below are some examples.
```r
1+2 #Addition.
5-2 #Subtraction.
5*2 #Multiplication.
5/2 #Division.
5 %% 2 #Modular Arthimetic.
(5*2) + (5-3) #Order of operations.
```
## Variables
When it comes to variables in R there is a different assignment operator. This is the arrow operator `<-`{.r}
Below is how to use this operator on assigning `var`{.bash} the value `5`{.bash}.
```r
var <- 5 #5 is now stored as the variable "var."
```
The naming convention in R is variables are either camel case, or the space between words is represented as a `.`{.bash}
```r
bank.account <- 20 #"period" notation.
bankAccount <-872 #camel case.
```
## Basic Data Types
In R we have a variety of data types like `numberic, logical, character`{.bash}, etc. We can find out what variables data type is by calling a function called `class()`{.bash}
```r
var <- 100
trueVar <- TRUE
falseVar <- FALSE
myName <- "Michael Dick"
class(var) #outputs: numeric
class(trueVar) #outputs: logical
class(falseVar) #outputs: logical
class(myName) #outputs: character
```
## Vector Basics
Vectors in R are 1-D arrays. The unique thing about these vectors is that they can act as a dictionary in Python. To initialize a vector in R we use the syntax: `vec <- c(10, 20 ,30)`{.r} where `c`{.bash} is a a function that combines all of these variables to be a part of this array. Now we can associate meaning to certain variable types. Look at the following:
```r
```
days <- c("Mon", "Tues", "Weds", "Thurs", "Fri", "Sat", "Sun")
temps <- c(72, 55, 79, 60, 80, 70, 69)
names(temps) <- days
temps
v1 <- c(100,200,300)
v2 <- c(a,b,c)
v1[1]
temp[1]
temps[1]
temp["Mon"]
temp[5]
temps[5]
temps[2:4]
temps[c(1,7)]
temps["Mon"]
temps["Mon"] #Returns the number assoicated with "Mon"
temps[c("Tues", "Fri")]
#Filter out values less than 2
vnum <- c(1,2,3,4)
vchar <- c('a', 'b', 'c', 'd')
vnum[vnum > 2]
names(vnum) <- vchar
vnum[vnum > 2]
vnum > 2
myFilter <- vnum > 2
v[myFilter]
v[myFilter]
vnum > 2
myFilter <- vnum>2
v[myFilter]
#Filter out values less than 2
vnum <- c(1,2,3,4)
vchar <- c('a', 'b', 'c', 'd')
names(vnum) <- vchar
myFilter <- vnum>2
v[myFilter]
vnum[myFilter]
temps[2:4] #Splicing
temps[c(1,7)] #Grab index 1 and index 7
temps["Mon"] #Returns the number assoicated with "Mon"
temps[c("Tues", "Fri")]
#Filter out values less than 2
vnum <- c(1,2,3,4)
vchar <- c('a', 'b', 'c', 'd')
names(vnum) <- vchar
v1 <- c(100,200,300)
v2 <- c(a,b,c)
v1[1]
temps[5]
temps[2:4] #Splicing
temps[c(1,7)] #Grab index 1 and index 7
temps["Mon"] #Returns the number assoicated with "Mon"
temps[c("Tues", "Fri")]
#Filter out values less than 2
vnum <- c(1,2,3,4)
vchar <- c('a', 'b', 'c', 'd')
names(vnum) <- vchar
vnum[vnum > 2] #Returns 3 and 4
vnum > 2
myFilter <- vnum>2
#START
v1 <- c(100,200,300)
v2 <- c(a,b,c)
v1[1]
temps[5]
temps[2:4] #Splicing
temps[c(1,7)] #Grab index 1 and index 7
temps["Mon"] #Returns the number assoicated with "Mon"
temps[c("Tues", "Fri")]
#Filter out values less than 2
vnum <- c(1,2,3,4)
vchar <- c('a', 'b', 'c', 'd')
names(vnum) <- vchar
vnum[vnum > 2] #Returns 3 and 4
vnum > 2
myFilter <- vnum>2
vnum[myFilter]
install.packages("rmdformats")
install.packages("rmdformats")
install.packages(remotes)
install.packages("rmdformats")
install.packages(remotes)
remotes::install_github("juba/rmdformats")
install.packages("rmdformats")
install.packages(remotes)
remotes::install_github("juba/rmdformats")
install.packages(remotes)  # if necessary
install.packages("rmdformats")
install.packages(remotes)
remotes::install_github("juba/rmdformats")
install.packages(remotes)  # if necessary
install.packages("rmdformats")
install.packages("rmdformats")
install.packages(remotes)
remotes::install_github("juba/rmdformats")
install.packages(remotes)  # if necessary
install.packages("rmdformats")
install.packages(remotes)
install.packages("rmdformats")
install.packages(remotes)
remotes::install_github("juba/rmdformats")
install.packages(remotes)  # if necessary
install.packages("rmdformats")
install.packages(remotes)
remotes::install_github("juba/rmdformats")
---
output: rmdformats::<template name>
---
#START
v1 <- c(100,200,300)
v2 <- c(a,b,c)
v1[1]
temps[5]
temps[2:4] #Splicing
temps[c(1,7)] #Grab index 1 and index 7
temps["Mon"] #Returns the number assoicated with "Mon"
temps[c("Tues", "Fri")]
#Filter out values less than 2
vnum <- c(1,2,3,4)
vchar <- c('a', 'b', 'c', 'd')
names(vnum) <- vchar
vnum[vnum > 2] #Returns 3 and 4
vnum > 2
myFilter <- vnum>2
vnum[myFilter]
help("vector")
??vector
?vector
#Solutions to R-Basics-Exercise#
#1. Wha is two to the power of five?#
var <- (2^5)
#Solutions to R-Basics-Exercise#
#1. Wha is two to the power of five?#
var <- (2^5)
var
var
#Create a vector called stock.prices with the following data points: 23,27,23,27,34#
stock.prices <- c(23,27,23,27,34)
stock.prices
#3. Assign names to the price data points relating to the day of the week, starting with Mon, Tue, Wed, etc... #
daysOfTheWeek <- c("Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun")
stock.prices <- daysOfTheWeek
stock.prices
#2. Create a vector called stock.prices with the following data points: 23,27,23,27,34#
stock.prices <- c(23,27,23,27,34)
#3. Assign names to the price data points relating to the day of the week, starting with Mon, Tue, Wed, etc... #
daysOfTheWeek <- c("Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun")
names(daysOfTheWeek)
names(stock.prices) <- daysOfTheWeek
#3. Assign names to the price data points relating to the day of the week, starting with Mon, Tue, Wed, etc... #
daysOfTheWeek <- c("Mon", "Tue", "Wed", "Thur", "Fri")
names(stock.prices) <- daysOfTheWeek
stock.prices
mean(stock.prices)
#2. Create a vector called stock.prices with the following data points: 23,27,23,27,34#
stock.prices <- c(23,27,23,21,34)
stock.prices
#3. Assign names to the price data points relating to the day of the week, starting with Mon, Tue, Wed, etc... #
daysOfTheWeek <- c("Mon", "Tue", "Wed", "Thur", "Fri")
names(stock.prices) <- daysOfTheWeek
stock.prices
mean(stock.prices)
#5. Create a vector called over.23 consisting of logicals that correspond to the days where the stock price was more than $23#
over.23 <- stock.prices[stock.prices > 23]
over.23
#6. Use a built-in function to find the day the price was the highest#
max(stock.prices)
