---
title: "`r params$set_title`"
author: "`r params$set_author`<br/>"
date: "Last Updated:  `r format(Sys.time(), '%d %B, %Y')`"
output:
  html_document:
    code_download: true
    keep_md: true
    toc: true
    toc_depth: 4
    theme: yeti
    highlight: pygments
params:
  set_title:  "Software Development Plan: Update Simulation Output Functions"
  set_author: !r stringr::str_to_title(gsub("\\.", " ", Sys.getenv()[["USERNAME"]]))
---

&nbsp;

# General Shiny App Design Principles

 - server functions just call other functions and are devoid of complex logic (excluding NULL checks)
 - functions in "R/helpers.R" are only dependent on other helper functions, the currently loaded packages, or have no dependencies
 - functions in "R/helpers.R" are called by both UI and server components
 - functions defined in "R/backend.R" contain the internal logic from previous implementations of the reactive server function
     - reactive server functions just contain calls to backend functions, helpers, and other reactive functions
     - backend functions containing extracted logic from reactive server functions have the same name as their corresponding server function with "_fn" appended to the end
         - example: 
             - reactive server function = `update_model()`
             - backend server function =  `update_model_fn()`
         - NOTE: rule may not hold in all cases
 
&nbsp;
&nbsp;

 
# Constraints for New Simulation Output Features

 - define all new (non-reactive) functions in "R/data_formats.R"
    - ideal to write unit tests for each "R/data_formats.R" function
 - do not edit "R/helpers.R"
 - add new reactive functions to "server.R"
 - add new UI components into "R/UIoutput.R"
 - okay to modify/refactor "R/backend.R" functions when necessary
    - do not add any new functions (put them in "R/data_formats.R")
 - no restrictions on updates to simulation output functions 
    - simulation output functions (these are yours to own):  
        - `rx_graph_function()`
        - `rx_pi_function()`
        - `rx_numerical_stats_function()`
    - full control to edit/modify as necessary (as long as it doesn't break app)



&nbsp;
&nbsp;
&nbsp;


# Shiny App Implementation Sequence for New Features

&nbsp;

### `r emo::ji("check")` 1.)	Define data formats for current implementation of simulation output functions

 - specify required dataset variables for input argument `df` into each simulation output function:  `rx_graph_function()`, `rx_pi_function()`, and `rx_numerical_stats_function()`
 - document format of output dataset from each function as well


&nbsp;

### `r emo::ji("check")` 2.)	Replace `DOSE` column with dosing regimen label `REGLAB`

 - Default `REGLAB` labeling:
    1. "REGN1"
    2. "REGN2"
    3. "REGN3"
 - Also add `REGNUM`
    1.	REGLAB = "REGN1" → REGNUM = 1
    2.	REGLAB = "REGN2" → REGNUM = 2
    3.	REGLAB = "REGN3" → REGNUM = 3

&nbsp;

### `r emo::ji("check")` 3.)	Define new dose regimen labeling function → `add_dose_regimen_label()`

 - Define in "R/data_formats.R"
 - Takes data.frame as input argument → df
 - Checks for existence of "REGLAB" column
     - If it doesn't exist
         1.	Add REGLAB = "REGN1"
         2.	Derive REGNUM from REGLAB
             - REGNUM = 1 for REGLAB = "REGN1"
     - If it does exist (skip for now)
         1.	Determine number of unique dosing regimens in dataset
             - New dosing regimen should have NA for REGLAB
         2. Fill REGLAB = `NA` with the next dosing regimen in the sequence
             - For example, if "REGN1" & "REGN2" is already in dataset
             - Fill missing values with REGLAB = "REGN3" 
             
             
```{r}
add_dose_regimen_label <- function(df) {
  df<-df %>%
    mutate(REGLAB = ifelse("REGLAB" %in% names(.), REGLAB, "REGN1"),
           REGNUM = as.integer(gsub(pattern="(?i)REGN", replacement="", REGLAB, perl=TRUE)))
  
  df
}
```

&nbsp;

### `r emo::ji("check")` 4.)	Replace `add_data_DOSE_DV()` function calls with `add_dose_regimen_label()`

&nbsp;

Callers of `add_data_DOSE_DV()` (replacement targets)

  1. `format_sim_output_data()` ("data_formats.R")
  2. `rx_pi_function()` ("rx_pi_function.R")
  3. `rx_numeric_stats_function()` ("rx_numeric_stats_function.R")



&nbsp;


### `r emo::ji("check")` 5.)	Update `format_sim_output_data()` input arguments

 - remove `mod` input argument (no longer used in function body)
 - add `cmt_cols` input argument with default value that allows function to run without error 
    - when `cmt_cols` isn't specified by the user, the function should retain the model compartment columns in the dataset
 - pass `cmt_cols = extract_model_cmt_names(mod)` into `format_sim_output_data()` from calling functions:
     1. `expand_sim_dataset_fn()`
     2. `expand_sim_input_data()` 
     3. `run_sim_series_from_data_template()` 
 
 
```{r}
extract_model_cmt_names <- function(mod) {
  mrgsolve::outvars(mod)$cmt
}

extract_model_capture_vars <- function(mod) {
  mrgsolve::outvars(mod)$capture
}

default_model_output_var <- function(mod) {
  rev(extract_model_capture_vars(mod))[1]
}
```


&nbsp;

### `r emo::ji("check")` 5 <sup>$\frac{3}{4}$</sup>.)	Fix bug for models without `DV` columns

 1. add call to `select_sim_output_variable_fn()` to add YNAME, YDATA to simulation dataset before plotting/summary statistics
 2. outline implementation plan for this function
 3. talk to Ian about implementation strategy
 4. IMPLEMENT!!!


```{r}
select_sim_output_variable_fn <- function(df, var = "DV") {
  var_name <- as.character(var)
  if (isTRUE(var_name %in% names(df))) {
    df <- df %>% mutate(YNAME = var_name) %>% mutate(YDATA = df[[var_name]])
  }
  df
}
```


<!-- <b> Implementation Plan for `select_sim_output_variable_fn()` </b> -->

<!--  - Create `select_sim_output_variable()` eventReactive server function -->
<!--     - Event trigger:  `input$do` -->
<!--         - Rerun simulation to update output results using user-selected output variable -->
<!--     - server function calls "data_formats.R" function `select_sim_output_variable_fn(df, var ="DV")` -->
<!--         - `select_sim_output_variable_fn(df = run_sim_series(), var = input$selected_output_var)` -->
<!--         - ~~`select_sim_output_variable_fn(df = DF_Simulation(), var = input$selected_output_var)`~~ -->
<!--  - Default output variable = last capture variable in model specification file -->
<!--     - `input$selected_output_var = default_model_output_var(mod)` -->
<!--         - Default output variable until user selects another valid output variable -->
<!--  - Call `select_sim_output_variable()` eventReactive from `DF_simulation()` server function -->


<!-- ```{r, eval = FALSE} -->
<!-- DF_Simulation <- eventReactive(input$do, label = "DF_Simulation <- eventReactive(input$do)", { -->
<!--   print_function_calls(fn_name = "DF_Simulation", fn_type = "eventReactive") -->
<!--   if (is.null(load_model_file())) return() -->
<!--   if (is.null(rx_dose_data())) return() -->

<!--   # select_sim_output_variable_fn(df = run_sim_series(), var = input$selected_output_var) -->
<!--   # select_sim_output_variable_fn(df = run_sim_series(), var = default_model_output_var(mod)) -->
<!--   select_sim_output_variable() -->
<!-- }) -->


<!-- select_sim_output_variable <- eventReactive(input$do, label = "select_sim_output_variable <- eventReactive(input$do)", { -->
<!--   print_function_calls(fn_name = "select_sim_output_variable", fn_type = "eventReactive") -->
<!--   if (is.null(load_model_file())) return() -->
<!--   if (is.null(rx_dose_data())) return() -->

<!--   select_sim_output_variable_fn(df = run_sim_series(), var = input$selected_output_var) -->
<!--   select_sim_output_variable_fn(df = run_sim_series(), var = default_model_output_var(mod = load_model_files())) -->
<!-- }) -->
<!-- ``` -->



&nbsp;

### `r emo::ji("check")` 6.)	Update `default_model_output_var()` "data_formats.R" function

 - Select "DV" as default model output variable, if it exists, otherwise choose the last capture column
 
 

&nbsp;

### `r emo::ji("check")` 7.)	Redefine all data formats after replacing `add_data_DOSE_DV()`

 - specify required dataset variables for input argument `df` into each simulation output function:  `rx_graph_function()`, `rx_pi_function()`, and `rx_numerical_stats_function()`
 - document format of output dataset from each function as well
 - verify data formats with "test_data-io_simulation_output_functions.R" test script and updated version of the shiny app code


&nbsp;

### `r emo::ji("check")` 8.) Create unit tests for all functions defined in "R/data_formats.R"

 - Successfully pass all unit tests for "R/data_formats.R" functions
 

&nbsp;
 
### `r emo::ji("check")` 9.) Remove calls to `add_dose_regimen_label()` inside `rx_pi_function()` & `rx_numeric_stats_function()`

 - Verify that data passed in as `df` input argument always has `REGLAB` & `REGNUM` columns defined 
 - Verify that no errors are produced after removing calls to `add_dose_regimen_label()`
 

&nbsp;
 
### `r emo::ji("check")` 10.)	Add reactive function for determining subset of valid dependent variables for simulation output plots/summary statistics

 - `list_valid_output_vars()` reactive server function
    - returns valid variable subset once model is loaded (add NULL check)
    - reactive server function calls "data_formats.R" function `list_valid_output_vars_fn()`, which calls `extract_mod_capture_table_vars(mod, exclude_types = "int")`
        - [For example usage of `extract_mod_capture_table_vars()`, see the following R script](P:\Projects\Regeneron\SimTools\20211201_TablerPMX\Documentation\data-specification\test_datasets\ryan.ghannam\test_data-io_simulation_output_functions.R)
 - Derive valid DVs based on current model `$CAPTURE` & `$TABLE` parameters after excluding exclude reserved model parameters
    - `<<VALID-OUTPUT-VARS>> = <<$CAPTURE-VARS>> + <<$TABLE-VARS>> - <<RESERVED-MODEL-VARS>>`
    - Exclude $TABLE variables of type "int" (usually counters, not output variables)
    - Exclude reserved internal shiny app variables defined in `reserved_library_model_params()`
        - `DOSE, REGNUM, WT, WTREF`



```{r, eval=FALSE}
## `extract_mod_capture_table_vars()` "R/data_formats.R" function
## - define in "R/data_formats.R"
## - called by `list_valid_output_vars_fn()` "data_formats.R" function
extract_mod_capture_table_vars <- function(mod, exclude_types = c()) {
  print_function_calls(fn_name = "extract_mod_capture_table_vars", fn_type = "function")
  mod@shlib$cpp_variables %>%
    filter(context %in% "table") %>%
    filter(!type %in% exclude_types) %>%
    rbind(., tibble::tibble(type = "capture", var = mrgsolve::outvars(mod)$capture, context = "capture")) %>%
    mutate(model = mod@model, .before = type)
}

## `list_valid_output_vars_fn()` "R/data_formats.R" function
## - define in "R/data_formats.R"
## - called by `list_valid_output_vars()` reactive server function
list_valid_output_vars_fn <- function(mod, user_data = NULL) {
  print_function_calls(fn_name = "list_valid_output_vars_fn", fn_type = "function")
  out_vars_info <- extract_mod_capture_table_vars(mod = mod, exclude_types = c("int"))
  out_vars_list <- intersect(out_vars_info$var, names(user_data))
  if (isTRUE(rlang::is_empty(out_vars_list))) out_vars_list <- out_vars_info$var
  setdiff(out_vars_list, reserved_library_model_params())
}

## `list_valid_output_vars()` reactive "server.R" function
## - define in "server.R"
list_valid_output_vars <- reactive(label = "list_valid_output_vars <- reactive()", {
  print_function_calls(fn_name = "list_valid_output_vars", fn_type = "reactive")
  if(is.null(load_model_file())) return()

  list_valid_output_vars_fn(
    mod = load_model_file(),
    user_data = NULL
  )
})
```



&nbsp;

### `r emo::ji("check")` 11.)	Add dropdown list UI element to "Simulation Output" tab

 - Dynamic UI dropdown list links:
     - https://stackoverflow.com/questions/21465411/r-shiny-passing-reactive-to-selectinput-choices
     - https://shiny.rstudio.com/reference/shiny/1.0.0/updateSelectInput.html
     - https://www.davidsolito.com/post/conditional-drop-down-in-shiny/

 - Dropdown list displays subset of valid output variables
 - Allows user to specify dependent variable for simulation output plots and summary statistics
    - Store user-selected output variable in `input$selected_output_var`
        - Default output variable defined by result of `default_model_output_var(mod)` until user selection of another variable in the list
    - Pass user-selected output variable name as `var` into `select_sim_output_variable_fn(df, var)` "R/data_formats.R" function, which is called from `select_sim_output_variable()` reactive server function
 - Create `select_sim_output_variable()` eventReactive server function
    - Event trigger:  `input$do`
        - Rerun simulation to update output results using user-selected output variable
    - return updated df
    - calls `select_sim_output_variable_fn()` "R/data_formats.R" function with the following input arguments:
        - `select_sim_output_variable_fn(df = DF_Simulation(), var = input$selected_output_var)`
 
 
 
&nbsp;

### 12.) (OPTIONAL) Update input arguments for simulation output functions



&nbsp;

### 13.) Fix bugs in `rx_numerical_stats_function()` summary table



&nbsp;

### 14.) Update simulation output plot aesthetics

 - Improve aesthetics of current simulation output plots
    - increase font size for all labels
    - better plot colors
    - etc (anything else you think could be improved)
    

&nbsp;
  
### 15.) (OPTIONAL) Assess feasibility of user-specified facet variables for output plots 


<b> NOTE: SKIP if too difficult </b> 

  - how would user specify facet variables?
  - how would faceted plots be displayed?
  - would we need to update plot legend/labels? 



&nbsp;

### 16.) Develop data verifcation/validation functions for user uploaded data

 - What are we going to check for in the dataset?
 - How are we going to check for each data requirement?
 - Develop functions to validate each data requirement
 
 
 
 
&nbsp;
 
### 17.) Create user data upload reactive functions

 - should be defined in "server.R"
 - UI components should be defined in "UIoutput.R"
 - All other non-reactive dependent functions for user uploaded data should be defined in "R/data_formats.R"
 - Remove original code for user data uploads from `rx_graph_function()`




&nbsp;
&nbsp;
&nbsp;
&nbsp;
&nbsp;






